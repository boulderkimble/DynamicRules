import * as vscode from 'vscode';
import * as fs from 'fs';
import * as path from 'path';

async function showDllPicker(startPath: string): Promise<string[]> {
    const quickPick = vscode.window.createQuickPick();
    quickPick.canSelectMany = true;
    quickPick.placeholder = 'Select .dll files or navigate folders';

    let currentPath = startPath;
    let selectedDlls: string[] = [];

    const updateItems = (dirPath: string) => {
        currentPath = dirPath;
        const entries = fs.readdirSync(dirPath, { withFileTypes: true });

        const items: vscode.QuickPickItem[] = entries
            .filter(entry => entry.isDirectory() || entry.name.toLowerCase().endsWith('.dll'))
            .map(entry => ({
                label: entry.name,
                description: entry.isDirectory() ? '📁 Folder' : '📄 DLL'
            }));

        if (path.dirname(dirPath) !== dirPath) {
            items.unshift({ label: '..', description: '⬆️ Up one level' });
        }

        quickPick.items = items;
    };

    updateItems(currentPath);

    quickPick.onDidChangeSelection(selection => {
        const selected = selection[0];
        if (!selected) return;

        const selectedPath = path.join(currentPath, selected.label);

        if (selected.label === '..') {
            updateItems(path.dirname(currentPath));
        } else if (fs.statSync(selectedPath).isDirectory()) {
            updateItems(selectedPath);
        }
    });

    quickPick.onDidAccept(() => {
        selectedDlls = quickPick.selectedItems
            .filter(item => item.description === '📄 DLL')
            .map(item => path.join(currentPath, item.label));
        quickPick.hide();
    });

    quickPick.show();

    // Wait for the picker to close
    await new Promise<void>(resolve => quickPick.onDidHide(resolve));

    return selectedDlls;
}

// Usage example in your command:
vscode.commands.registerCommand('rulevalidator.setAssemblies', async () => {
    const workspaceFolders = vscode.workspace.workspaceFolders;
    const startPath = workspaceFolders && workspaceFolders.length > 0
        ? workspaceFolders[0].uri.fsPath
        : process.cwd();

    let allPaths: string[] = [];
    let keepGoing = true;
    while (keepGoing) {
        const dlls = await showDllPicker(startPath);
        if (dlls.length > 0) {
            allPaths.push(...dlls);
            const answer = await vscode.window.showQuickPick(['Yes', 'No'], { placeHolder: 'Add more assemblies from another directory?' });
            keepGoing = answer === 'Yes';
        } else {
            keepGoing = false;
        }
    }
    if (allPaths.length > 0) {
        await vscode.workspace.getConfiguration().update(
            'rulevalidator.assemblyPaths',
            allPaths.join(','),
            vscode.ConfigurationTarget.Global
        );
        vscode.window.showInformationMessage('Assembly paths updated.');
    }
});